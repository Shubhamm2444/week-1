Object-Oriented JavaScript (OOJS) in MERN Stack Development:

Understanding OOJS:
While JavaScript isn't a strictly class-based object-oriented language like Java or C++, it offers techniques to achieve object-oriented programming paradigms. OOJS principles encourage code organization using objects that encapsulate data (properties) and behavior (methods) to create reusable, maintainable code.

Key Concepts:
Objects: Represent entities with properties (data) and methods (functions that operate on that data).
Constructors: Functions used to create new objects (instances) of a class (blueprint).
Prototypes: Every object in JavaScript has a prototype, which is another object that serves as a blueprint for the properties and methods inherited by the object.
Inheritance: Allows objects to inherit properties and methods from another object (parent class).
Encapsulation: Grouping data (properties) with the methods that operate on it within an object, promoting data protection and controlled access.
Polymorphism: The ability of objects of different classes to respond to the same method call in different ways.


//Implementing OOJS in JavaScript:
Here are common approaches to achieve object-oriented design in JavaScript:
1:Constructor Functions:
JavaScript
function Person(name, age) {
  this.name = name;
  this.age = age;
 this.greet = function() {
    console.log("Hello, my name is " + this.name);
  };
}
const person1 = new Person("Alice", 30);
person1.greet(); // Output: Hello, my name is Alice.

2:Prototypal Inheritance:
JavaScript
function Person(name, age) {
  this.name = name;
  this.age = age;
}
Person.prototype.greet = function() {
  console.log("Hello, my name is " + this.name);
};
const person1 = new Person("Bob", 25);
person1.greet(); // Output: Hello, my name is Bob.
Here, greet is defined on the Person.prototype, which becomes the prototype for all Person instances.

3:Classes (ES6 Syntax):
class Person {
constructor(name, age) {
this.name = name;
this.age = age;
} greet() {
   console.log("Hello, my name is " + this.name);
 }
}
const person1 = new Person("Charlie", 40);
person1.greet(); // Output: Hello, my name is Charlie.
**Properties:** These can be defined in the constructor or outside using `get` and `set` accessors for data control.
